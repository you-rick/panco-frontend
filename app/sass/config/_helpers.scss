@import "mixins";

// Useful classes
.right {
  float: right !important;
}

.left {
  float: left !important;
}

.hidden {
  display: none;
}

.o-hidden {
  overflow: hidden;
}

.text-left {
  text-align: left !important;
}

.text-center {
  text-align: center !important;
}

.text-right {
  text-align: right !important;
}

.hide-sm-desktop {
  @include from-sm-screen {
    display: none !important;
  }
}

.hide-sm-mobile {
  @include till-sm-screen {
    display: none !important;
  }
}
.hide-md-desktop {
  @include from-md-screen {
    display: none !important;
  }
}

.hide-md-mobile {
  @include till-md-screen {
    display: none !important;
  }
}


/* === Flex Grid Helpers === */
.flex-parent {
  display: flex;

  &.flex-column {
    flex-direction: column;
  }

  &.justify-start {
    justify-content: flex-start;
  }

  &.justify-center {
    justify-content: center;
  }

  &.justify-end {
    justify-content: flex-end;
  }

  &.align-top {
    align-items: flex-start;
  }

  &.align-center {
    align-items: center;
  }

  &.align-bottom {
    align-items: flex-end;
  }

  &.flex-wrap {
    flex-wrap: wrap;
  }

  @for $i from 1 through 12 {
    .flex-#{$i} {
      flex: $i;
    }
  }
}

/* === Sizes === */
$sizes: 10, 20, 25, 33, 50, 66, 75, 100;
$unit: "%";

@each $size in $sizes {
  .w-#{$size} {
    width: #{$size + $unit};
  }
}

/*
This .scss loop will create "margin helpers" and "padding helpers" for use in your web projects.
*/

$sizeUnit: rem;
$marginKey: 'm';
$paddingKey: 'p';
$separator: '-';
$sizes: (
                ('0', 0), ('1', 0.5), ('2', 1),
                ('3', 1.5), ('4', 2), ('5', 2.5),
                ('6', 3), ('7', 3.5), ('8', 4),
                ('9', 4.5), ('10', 5),
);
$positions: (
                ('t', 'top'),
                ('r', 'right'),
                ('b', 'bottom'),
                ('l', 'left')
);

@function sizeValue($key, $value) {
  @return if($key == 'none', 0, $value + $sizeUnit);
}

@each $size in $sizes {
  $sizeKey: nth($size, 1);
  $sizeValue: nth($size, 2);
  .#{$marginKey}#{$separator}#{$sizeKey} {
    margin: sizeValue($sizeKey, $sizeValue)!important;
  }
  .#{$paddingKey}#{$separator}#{$sizeKey} {
    padding: sizeValue($sizeKey, $sizeValue) !important;
  }
  @each $position in $positions {
    $posKey: nth($position, 1);
    $posValue: nth($position, 2);
    .#{$marginKey}#{$posKey}#{$separator}#{$sizeKey} {
      margin-#{$posValue}: sizeValue($sizeKey, $sizeValue)!important;
    }
    .#{$paddingKey}#{$posKey}#{$separator}#{$sizeKey} {
      padding-#{$posValue}: sizeValue($sizeKey, $sizeValue)!important;
    }
  }
}
